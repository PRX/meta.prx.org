#!/usr/bin/env ruby
require 'optparse'
require 'json'

IMAGE_VALID = /^[a-zA-Z0-9.\-]+\/[a-zA-Z0-9\.\-]+:[a-zA-Z0-9\.\-]+$/

#
# blue/green deploy a single ecs service (assumes the presence of the aws cli)
#
$options = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: ecs-deploy [options]'
  opts.on('-c', '--cluster CLUSTER', 'Name of ECS cluster') { |v| $options[:cluster] = v }
  opts.on('-n', '--service-name SERVICE_NAME', 'Name of service to deploy') { |v| $options[:service_name] = v }
  opts.on('-i', '--image IMAGE', 'Name of Docker image to run, ex: repo/image:latest') { |v| $options[:image] = v }
  opts.on('-m', '--mapping MAPPING', 'Mapping multiple cluster services to new image names: "ecsServiceName=some/docker/image:123"') { |v| $options[:mapping] = v }
  opts.on('-t', '--timeout TIMEOUT', 'How long to wait for new services to start running.') { |v| $options[:timeout] = v.to_i }
  opts.on('-f', '--force', 'Force the service to update, even if the image has not changed') { |v| $options[:force] = v }
end.parse!

# Make sure the cli is installed
AWS = `which aws`.chomp
abort 'Cannot locate aws cli - is it installed?' if AWS.empty?
def ecs(command, args = {})
  args[:cluster] = $options[:cluster] unless command =~ /task-definition/
  arg_str = args.map {|key, val| "--#{key.to_s.gsub('_', '-')} #{val}"}.join(' ')
  response = `#{AWS} --output json ecs #{command} #{arg_str}`
  abort "Error running '#{command}'" if response.empty?
  JSON.parse(response)
end

# Validate options
$options[:timeout] ||= 90
abort 'You must provide an ECS cluster!' unless $options[:cluster]
abort 'You must designate an ECS service name or use a mapping!' unless $options[:service_name] || $options[:mapping]
abort 'You must set an image or use a mapping!' unless $options[:image] || $options[:mapping]

# Validate the mappings/images
mappings = {}
if $options[:mapping]
  $options[:mapping].split(',').each do |mapping|
    serviceToImage = mapping.split('=')
    if serviceToImage.count != 2 || serviceToImage[0].empty? || serviceToImage[1].empty?
      abort "Invalid service mapping: #{mapping}"
    elsif !serviceToImage[1].match(IMAGE_VALID)
      abort "Unrecognized image string: #{serviceToImage[1]}"
    else
      mappings[serviceToImage[0]] = serviceToImage[1]
    end
  end
else
  abort "Unrecognized image string: #{$options[:image]}" unless $options[:image].match(IMAGE_VALID)
  mappings[$options[:service_name]] = $options[:image]
end

# Get the current task arns and # of tasks running
old_arns = {}
task_counts = {}
services = ecs('describe-services', services: mappings.keys.join(' '))
services['services'].each do |service|
  old_arns[service['serviceName']] = service['taskDefinition']
  task_counts[service['serviceName']] = service['desiredCount']
end
missing_services = mappings.keys - old_arns.keys
abort "Unknown services: #{missing_services.join(', ')}" unless missing_services.empty?

# Get a JSON representation of the current task definitions
old_defs = {}
threads = old_arns.map do |service, old_arn|
  Thread.new do
    old_defs[service] = ecs('describe-task-definition', task_def: old_arn)
  end
end
threads.map(&:join)

# Filter the def, and change the image
want_keys = %w(family volumes containerDefinitions)
new_defs = {}
old_defs.each do |service, old_def|
  new_defs[service] = old_def['taskDefinition'].select { |k| want_keys.include?(k) }
  new_defs[service]['containerDefinitions'][0]['image'] = mappings[service]

  # Currently can only handle 1-container-per-task-definition
  num = new_defs[service]['containerDefinitions'].count
  abort "Can only process task defs with 1 container - #{service} has #{num}" if num != 1
end

# Pretty print changes
services_to_update = []
puts
puts "Updating services in #{$options[:cluster]}"
puts
mappings.each do |service, new_img|
  count = task_counts[service] == 1 ? '1 task' : "#{task_counts[service]} tasks"
  old_img = old_defs[service]['taskDefinition']['containerDefinitions'][0]['image']
  puts "  #{service} (#{count})"
  puts "     old: #{old_img}"
  if $options[:force] || old_img != new_img
    services_to_update << service
    puts "     new: #{new_img}"
  else
    puts '     new: (unchanged)'
  end
  puts
end

# Abort early if all unchanged
if services_to_update.empty?
  puts 'Images have not changed - nothing to do!'
  exit
end

# Register task defs
puts 'Creating new task definitions...'
new_arns = {}
threads = services_to_update.map do |service|
  Thread.new do
    json = "'" + JSON.generate(new_defs[service]) + "'"
    new_taskdef = ecs('register-task-definition', cli_input_json: json)
    new_arns[service] = new_taskdef['taskDefinition']['taskDefinitionArn']
  end
end
threads.map(&:join)
new_arns.values.each() { |arn| puts "  #{arn}" }
puts

# Point the service to the new task def
puts 'Updating services...'
threads = new_arns.map do |service, new_arn|
  Thread.new do
    ecs('update-service', service: service, task_definition: new_arn)
  end
end
threads.map(&:join)
puts "  #{new_arns.keys.count} updated"
puts

# Wait for the tasks to cycle to the new def
puts 'Waiting for tasks to cycle...'
num_running = {}
new_arns.each { |service, new_arn| num_running[service] = 0 }
start = Time.now
loop do
  sleep 4

  # Scan the list of running tasks for that service, and see if all of them are
  # running the new version of the task definition
  threads = new_arns.map do |service, new_arn|
    Thread.new do
      if num_running[service] < task_counts[service]
        service_tasks = ecs('list-tasks', service_name: service, desired_status: 'RUNNING')
        tasks = ecs('describe-tasks', tasks: service_tasks['taskArns'].join(' '))
        num_running[service] = tasks['tasks'].select { |t|
          t['lastStatus'] == 'RUNNING' && t['taskDefinitionArn'] == new_arn
        }.count
      end
    end
  end
  threads.map(&:join)

  elapsed = Time.now - start
  counts = num_running.map { |service, count| "#{service}[#{count}/#{task_counts[service]}]" }
  puts "  #{elapsed.round} seconds -> #{counts.join(' ')}"

  not_done = num_running.select { |service, count| count < task_counts[service] }
  break if not_done.empty?
  abort 'ERROR: timed out waiting for tasks to cycle' if elapsed > $options[:timeout]
end

puts
puts 'Services updated successfully!'
