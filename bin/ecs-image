#!/usr/bin/env ruby
require 'optparse'
require 'json'

#
# find the name of the image running for a service + cluster
#
$options = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: ecs-deploy [options]'
  opts.on('-c', '--cluster CLUSTER', 'Name of ECS cluster') { |v| $options[:cluster] = v }
  opts.on('-n', '--service-name SERVICE_NAME', 'Name of service to deploy') { |v| $options[:service_name] = v }
end.parse!

# Make sure the cli is installed
AWS = `which aws`.chomp
abort 'Cannot locate aws cli - is it installed?' if AWS.empty?
def ecs(command, args = {})
  args[:cluster] = $options[:cluster] unless command =~ /task-definition/
  arg_str = args.map {|key, val| "--#{key.to_s.gsub('_', '-')} #{val}"}.join(' ')
  response = `#{AWS} --output json ecs #{command} #{arg_str}`
  abort "Error running '#{command}'" if response.empty?
  JSON.parse(response)
end

# Validate options
$options[:timeout] ||= 90
abort 'You must provide an ECS cluster!' unless $options[:cluster]
abort 'You must designate an ECS service name!' unless $options[:service_name]

# Get current task definition name from service
services = ecs('describe-services', services: $options[:service_name])
abort "Service '#{$options[:service_name]}' not found" if services['services'].empty?
task_def_arn = services['services'][0]['taskDefinition']

# Lookup image(s) in the task definition
task_def = ecs('describe-task-definition', task_def: task_def_arn)
count = task_def['taskDefinition']['containerDefinitions'].count
abort "ERROR: found #{count} containers for task-def #{task_def_arn}" unless count == 1
task_image = task_def['taskDefinition']['containerDefinitions'][0]['image']

# Just print the image name
puts task_image
